{"version":3,"sources":["../../src/rpc/walletMidddleware.ts","../../src/rpc/ethRpcMiddlewares.ts","../../src/rpc/jrpcClient.ts","../../src/providers/injectedProviders/walletConnectUtils.ts","../../src/providers/injectedProviders/WalletConnectProvider.ts","../../src/providers/converter.ts","../../src/providers/privateKeyProviders/TransactionFormatter/utils.ts","../../src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","../../src/providers/utils.ts","../../src/providers/privateKeyProviders/TransactionFormatter/constants.ts","../../src/providers/privateKeyProviders/TransactionFormatter/index.ts","../../src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts"],"names":["resemblesAddress","str","length","createWalletMiddleware","getAccounts","getPrivateKey","processDecryptMessage","processEncryptionPublicKey","processEthSignMessage","processPersonalMessage","processTransaction","processSignTransaction","processTypedMessage","processTypedMessageV3","processTypedMessageV4","Error","validateAndNormalizeKeyholder","address","req","accounts","normalizedAccounts","map","_address","toLowerCase","normalizedAddress","includes","rpc","invalidParams","message","res","result","ethErrors","methodNotSupported","txParams","params","from","extraParams","msgParams","data","version","firstParam","secondParam","warning","ciphertext","createScaffoldMiddleware","eth_accounts","createAsyncMiddleware","eth_private_key","eth_coinbase","eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt","createEthMiddleware","providerHandlers","mergeMiddleware","eth_syncing","createChainIdMiddleware","chainId","next","end","method","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","connector","_","sendTransaction","signTransaction","signMessage","signPersonalMessage","signTypedData","WalletConnectProvider","constructor","config","state","chainConfig","chainNamespace","CHAIN_NAMESPACES","EIP155","skipLookupNetwork","enable","provider","custom","code","setupProvider","_providerEngineProxy","request","onConnectorStateUpdate","setupEngine","switchChain","addChain","lookup","displayName","currentChainConfig","getChainConfig","update","sendCustomRequest","chainName","rpcUrls","log","error","configure","lookupNetwork","WalletInitializationError","notReady","connected","WalletLoginError","notConnectedError","connectedHexChainId","isHexStrict","toString","rpcConnectionError","emit","getProviderHandlers","ethMiddleware","engine","JRPCEngine","push","providerFromEngine","updateProviderEngineProxy","on","payload","connectedChainId","rpcUrl","maybeConfig","BaseProvider","providerFactory","BIG_NUMBER_WEI_MULTIPLIER","BigNumber","BIG_NUMBER_GWEI_MULTIPLIER","BIG_NUMBER_ETH_MULTIPLIER","toBigNumber","hex","n","stripHexPrefix","dec","toNormalizedDenomination","WEI","bigNumber","div","GWEI","ETH","toSpecifiedDenomination","times","dp","ROUND_HALF_UP","baseChange","conversionUtil","value","fromNumericBase","fromDenomination","toNumericBase","toDenomination","numberOfDecimals","convertedValue","ROUND_HALF_DOWN","converter","decGWEIToHexWEI","decGWEI","hexWEIToDecGWEI","normalizeGWEIDecimalNumbers","fetchEip1159GasEstimates","url","get","estimates","normalizedEstimates","estimatedBaseFee","low","suggestedMaxPriorityFeePerGas","suggestedMaxFeePerGas","medium","high","fetchLegacyGasPriceEstimates","referrer","referrerPolicy","mode","SafeGasPrice","ProposeGasPrice","FastGasPrice","validateTypedMessageParams","parameters","activeChainId","assert","ok","isValidAddress","SignTypedDataVersion","V1","doesNotThrow","JSON","parse","Array","isArray","typedSignatureHash","V3","V4","primaryType","types","validation","jsonschema","validate","TYPED_MESSAGE_SCHEMA","properties","strictEqual","errors","domain","Number","isNaN","parseInt","fail","invalidInput","signTx","privKey","txFormatter","formatTransaction","finalTxParams","getCommonConfiguration","common","unsignedEthTx","fromTxData","signedTx","sign","Buffer","serialize","getProviderEngineProxy","privateToAddress","providerEngineProxy","concat","txHash","rawMessageSig","privKeyBuffer","sig","personalSign","privateKey","debug","finalChainId","info","getEncryptionPublicKey","stripped","buff","decrypt","encryptedData","bnToHex","inputBn","addHexPrefix","hexToBn","inputHex","BN","isBN","BnMultiplyByFraction","targetBN","numerator","denominator","numberBN","denomBN","mul","TRANSACTION_ENVELOPE_TYPES","TRANSACTION_TYPES","GAS_ESTIMATE_TYPES","TransactionFormatter","providerProxy","init","getEIP1559Compatibility","isEIP1559Compatible","name","hardfork","Hardfork","London","Berlin","customChainParams","networkId","defaultHardfork","Common","undefined","clonedTxParams","nonce","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gas","getDefaultGasLimit","defaultGasLimit","gasLimit","getDefaultGasFees","defaultGasPrice","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","a","b","lt","type","fetchEthGasPriceEstimate","latestBlock","supportsEIP1559","baseFeePerGas","fetchGasFeeEstimateData","isLegacyGasAPICompatible","replace","gasData","gasFeeEstimates","gasEstimateType","estimateTxGas","txMeta","analyzeGasUsage","block","blockGasLimitBN","saferGasLimitBN","estimatedGasHex","warn","blockGasLimit","addGasBuffer","initialGasLimitHex","blockGasLimitHex","multiplier","initialGasLimitBn","blockGasLimitBn","upperGasLimitBn","muln","bufferedGasLimitBn","gt","determineTransactionCategory","txParameters","to","txCategory","transactionCategory","EthereumPrivateKeyProvider","bind","chainSwitchMiddleware","getChainSwitchMiddleware","getAccountMiddleware","updateAccount","network","chainDisconnected","chainSwitchHandlers","blockExplorerUrls","nativeCurrency","ticker","symbol","tickerName","blockExplorer","chainParams","wallet_addEthereumChain","wallet_switchEthereumChain","createChainSwitchMiddleware","accountHandlers","updatePrivatekey","accountParams","wallet_updateAccount","createAccountMiddleware"],"mappings":"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","file":"static/js/23.effb60bd.chunk.js","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { createFetchMiddleware, providerFromEngine, signMessage } from '@toruslabs/base-controllers';\nimport { createScaffoldMiddleware, createAsyncMiddleware, mergeMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, log, WalletInitializationError, WalletLoginError, isHexStrict, getChainConfig } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { TransactionFactory } from '@ethereumjs/tx';\nimport { SignTypedDataVersion, TYPED_MESSAGE_SCHEMA, typedSignatureHash, personalSign, signTypedData, getEncryptionPublicKey, decrypt } from '@metamask/eth-sig-util';\nimport { stripHexPrefix, isValidAddress, privateToAddress, addHexPrefix, BN } from 'ethereumjs-util';\nimport { get } from '@toruslabs/http-helpers';\nimport assert from 'assert';\nimport jsonschema from 'jsonschema';\nimport BigNumber, { BigNumber as BigNumber$1 } from 'bignumber.js';\nimport Common, { Hardfork } from '@ethereumjs/common';\n\nfunction ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction resemblesAddress(str) {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nfunction createWalletMiddleware(_ref) {\n  let {\n    getAccounts,\n    getPrivateKey,\n    processDecryptMessage,\n    processEncryptionPublicKey,\n    processEthSignMessage,\n    processPersonalMessage,\n    processTransaction,\n    processSignTransaction,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4\n  } = _ref;\n\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  } //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n\n\n  async function validateAndNormalizeKeyholder(address, req) {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts = await getAccounts(req);\n      const normalizedAccounts = accounts.map(_address => _address.toLowerCase());\n      const normalizedAddress = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n\n    throw ethErrors.rpc.invalidParams({\n      message: \"Invalid parameters: must provide an Ethereum address.\"\n    });\n  } //\n  // account lookups\n  //\n\n\n  async function lookupAccounts(req, res) {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req, res) {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  } //\n  // transaction signatures\n  //\n\n\n  async function sendTransaction(req, res) {\n    if (!processTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req, res) {\n    if (!processSignTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processSignTransaction(txParams, req);\n  } //\n  // message signatures\n  //\n\n\n  async function ethSign(req, res) {\n    if (!processEthSignMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$5(_objectSpread$5({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req, res) {\n    if (!processTypedMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const message = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const version = \"V1\";\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$5(_objectSpread$5({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req, res) {\n    if (!processTypedMessageV3) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V3\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req, res) {\n    if (!processTypedMessageV4) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V4\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req, res) {\n    if (!processPersonalMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    } // process normally\n\n\n    const firstParam = req.params[0];\n    const secondParam = req.params[1]; // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n\n    const extraParams = req.params[2] || {}; // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n\n    let address, message;\n\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = \"The eth_personalSign method requires params ordered \";\n      warning += \"[message, address]. This was previously handled incorrectly, \";\n      warning += \"and has been corrected automatically. \";\n      warning += \"Please switch this param order for smooth behavior in the future.\";\n      res.warning = warning;\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams = _objectSpread$5(_objectSpread$5({}, extraParams), {}, {\n      from: address,\n      data: message\n    }); // eslint-disable-next-line require-atomic-updates\n\n\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req, res) {\n    if (!processEncryptionPublicKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req, res) {\n    if (!processDecryptMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const ciphertext = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$5(_objectSpread$5({}, extraParams), {}, {\n      from: address,\n      data: ciphertext\n    });\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req, res) {\n    if (!getPrivateKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage)\n  });\n}\n\nfunction createEthMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processSignTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([createScaffoldMiddleware({\n    eth_syncing: false\n  }), createWalletMiddleware({\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processEthSignMessage,\n    processSignTransaction,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage\n  })]);\n  return ethMiddleware;\n}\nfunction createChainSwitchMiddleware(_ref) {\n  let {\n    addChain,\n    switchChain\n  } = _ref;\n\n  async function addNewChain(req, res) {\n    var _req$params;\n\n    const chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n    res.result = await addChain(chainParams);\n  }\n\n  async function updateChain(req, res) {\n    var _req$params2;\n\n    const chainParams = (_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain)\n  });\n} // #region account middlewares\n\nfunction createAccountMiddleware(_ref2) {\n  let {\n    updatePrivatekey\n  } = _ref2;\n\n  async function updateAccount(req, res) {\n    var _req$params3;\n\n    const accountParams = (_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.length ? req.params[0] : undefined;\n    if (!(accountParams !== null && accountParams !== void 0 && accountParams.privateKey)) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount)\n  });\n} // #endregion account middlewares\n\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n\n    return next();\n  };\n}\nfunction createProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n\n    return next();\n  };\n}\nfunction createJsonRpcClient(providerConfig) {\n  const {\n    chainId,\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({\n    rpcTarget\n  });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\n\nfunction getProviderHandlers$1(_ref) {\n  let {\n    connector\n  } = _ref;\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async _ => {\n      const {\n        accounts\n      } = connector;\n\n      if (accounts && accounts.length) {\n        return accounts;\n      }\n\n      throw new Error(\"Failed to get accounts\");\n    },\n    processTransaction: async (txParams, _) => {\n      const result = await connector.sendTransaction(txParams);\n      return result;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const result = await connector.signTransaction(txParams);\n      return result;\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const result = await connector.signMessage([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);\n      return result;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV3: async msgParams => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV4: async msgParams => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processEncryptionPublicKey: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n  };\n}\n\nfunction ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass WalletConnectProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      connector\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$4(_objectSpread$4({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        }),\n        skipLookupNetwork: !!config.skipLookupNetwork\n      },\n      state: _objectSpread$4(_objectSpread$4({}, state || {}), {}, {\n        chainId: \"loading\",\n        accounts: []\n      })\n    });\n\n    _defineProperty(this, \"connector\", null);\n\n    this.connector = connector || null;\n  }\n\n  async enable() {\n    if (!this.connector) throw ethErrors.provider.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(connector) {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  async switchChain(_ref2) {\n    let {\n      chainId,\n      addChain = true,\n      lookup = true\n    } = _ref2;\n    if (!this.connector) throw ethErrors.provider.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    const currentChainConfig = this.getChainConfig(chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    const {\n      rpcTarget,\n      displayName\n    } = currentChainConfig;\n\n    if (addChain) {\n      try {\n        await this.connector.sendCustomRequest({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId,\n            chainName: displayName,\n            rpcUrls: [rpcTarget]\n          }]\n        });\n      } catch (error) {\n        log.error(error);\n      }\n    }\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId\n        }]\n      });\n    } catch (error) {\n      log.error(error); // ignore this error because metamask & others return provider.result as null\n      // wallet connect thinks this is wrong\n\n      if (error.message !== \"JSON RPC response format is invalid\") {\n        throw error;\n      }\n    }\n\n    this.configure({\n      chainConfig: currentChainConfig\n    });\n    if (lookup) await this.lookupNetwork(this.connector);\n  }\n\n  async addChain(chainConfig) {\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    const {\n      rpcTarget,\n      displayName\n    } = chainConfig;\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_addEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId,\n          chainName: displayName,\n          rpcUrls: [rpcTarget]\n        }]\n      });\n      super.addChain(chainConfig);\n    } catch (error) {\n      log.error(error);\n      throw error;\n    }\n  }\n\n  async lookupNetwork(connector) {\n    if (!connector.connected) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (!this.provider) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : \"0x\".concat(connector.chainId.toString(16));\n    if (chainId !== connectedHexChainId) throw WalletInitializationError.rpcConnectionError(\"Invalid network, net_version is: \".concat(connectedHexChainId, \", expected: \").concat(chainId));\n    this.provider.emit(\"connect\", {\n      chainId\n    });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return connectedHexChainId;\n  }\n\n  async setupEngine(connector) {\n    const providerHandlers = getProviderHandlers$1({\n      connector\n    });\n    this.update({\n      accounts: connector.accounts || []\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    if (!this.config.skipLookupNetwork) await this.lookupNetwork(connector);\n  }\n\n  async onConnectorStateUpdate(connector) {\n    connector.on(\"session_update\", async (error, payload) => {\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n\n      if (error) {\n        this.provider.emit(\"error\", error);\n        return;\n      }\n\n      const {\n        accounts,\n        chainId: connectedChainId,\n        rpcUrl\n      } = payload.params[0]; // Check if accounts changed and trigger event\n\n      if (accounts !== null && accounts !== void 0 && accounts.length && this.state.accounts[0] !== accounts[0]) {\n        this.update({\n          accounts\n        }); // await this.setupEngine(connector);\n\n        this.provider.emit(\"accountsChanged\", accounts);\n      }\n\n      const connectedHexChainId = \"0x\".concat(connectedChainId.toString(16)); // Check if chainId changed and trigger event\n\n      if (connectedChainId && this.state.chainId !== connectedHexChainId) {\n        const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedChainId) || {}; // Handle rpcUrl update\n\n        this.configure({\n          chainConfig: _objectSpread$4(_objectSpread$4({}, maybeConfig), {}, {\n            chainId: connectedHexChainId,\n            rpcTarget: rpcUrl,\n            chainNamespace: CHAIN_NAMESPACES.EIP155\n          })\n        });\n        await this.setupEngine(connector);\n      }\n    });\n  }\n\n}\n\n_defineProperty(WalletConnectProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new WalletConnectProvider({\n    config: {\n      chainConfig: params.chainConfig,\n      skipLookupNetwork: params.skipLookupNetwork\n    }\n  });\n  await providerFactory.setupProvider(params.connector);\n  return providerFactory;\n});\n\nconst BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\"); // Setter Maps\n\nconst toBigNumber = {\n  hex: n => typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16),\n  dec: n => new BigNumber(n, 10)\n};\nconst toNormalizedDenomination = {\n  WEI: bigNumber => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: bigNumber => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: bigNumber => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER)\n};\nconst toSpecifiedDenomination = {\n  WEI: bigNumber => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP),\n  GWEI: bigNumber => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n  ETH: bigNumber => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP)\n};\nconst baseChange = {\n  hex: n => n.toString(16),\n  dec: n => new BigNumber(n).toString(10)\n};\n\nconst converter = params => {\n  const {\n    value,\n    fromNumericBase,\n    fromDenomination,\n    toNumericBase,\n    toDenomination,\n    numberOfDecimals\n  } = params;\n  let convertedValue = toBigNumber[fromNumericBase](value);\n\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue);\n  }\n\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue);\n  }\n\n  if (numberOfDecimals) {\n    convertedValue = convertedValue.dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n\n  return convertedValue;\n};\n\nconst conversionUtil = (value, _ref) => {\n  let {\n    fromNumericBase = \"hex\",\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals\n  } = _ref;\n  return converter({\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    value: value || \"0\"\n  });\n};\n\nfunction decGWEIToHexWEI(decGWEI) {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\"\n  });\n}\n\nfunction hexWEIToDecGWEI(decGWEI) {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\"\n  });\n}\n\nfunction ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction normalizeGWEIDecimalNumbers(n) {\n  const numberAsWEIHex = decGWEIToHexWEI(n);\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);\n  return numberAsGWEI;\n}\nasync function fetchEip1159GasEstimates(url) {\n  const estimates = await get(url);\n\n  const normalizedEstimates = _objectSpread$3(_objectSpread$3({}, estimates), {}, {\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    low: _objectSpread$3(_objectSpread$3({}, estimates.low), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas)\n    }),\n    medium: _objectSpread$3(_objectSpread$3({}, estimates.medium), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas)\n    }),\n    high: _objectSpread$3(_objectSpread$3({}, estimates.high), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas)\n    })\n  });\n\n  return normalizedEstimates;\n}\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\n\nasync function fetchLegacyGasPriceEstimates(url) {\n  const result = await get(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n    mode: \"cors\"\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice\n  };\n}\nconst validateTypedMessageParams = (parameters, activeChainId) => {\n  var _data$domain;\n\n  try {\n    assert.ok(parameters && typeof parameters === \"object\", \"Params must be an object.\");\n    assert.ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n    assert.ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n    assert.ok(typeof parameters.from === \"string\" && isValidAddress(parameters.from), '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.');\n    let data = null;\n    let chainId = null;\n\n    switch (parameters.version) {\n      case SignTypedDataVersion.V1:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n\n        assert.ok(Array.isArray(data), \"params.data must be an array.\");\n        assert.doesNotThrow(() => {\n          typedSignatureHash(data);\n        }, \"Signing data must be valid EIP-712 typed data.\");\n        break;\n\n      case SignTypedDataVersion.V3:\n      case SignTypedDataVersion.V4:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n\n        assert.ok(data.primaryType in data.types, \"Primary type of \\\"\".concat(data.primaryType, \"\\\" has no type definition.\"));\n        const validation = jsonschema.validate(data, TYPED_MESSAGE_SCHEMA.properties);\n        assert.strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n        chainId = (_data$domain = data.domain) === null || _data$domain === void 0 ? void 0 : _data$domain.chainId;\n\n        if (chainId) {\n          assert.ok(!Number.isNaN(activeChainId), \"Cannot sign messages for chainId \\\"\".concat(chainId, \"\\\", because Web3Auth is switching networks.\"));\n\n          if (typeof chainId === \"string\") {\n            chainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n          }\n\n          assert.strictEqual(chainId, activeChainId, \"Provided chainId \\\"\".concat(chainId, \"\\\" must match the active chainId \\\"\").concat(activeChainId, \"\\\"\"));\n        }\n\n        break;\n\n      default:\n        assert.fail(\"Unknown typed data version \\\"\".concat(parameters.version, \"\\\"\"));\n    }\n  } catch (error) {\n    throw ethErrors.rpc.invalidInput({\n      message: error === null || error === void 0 ? void 0 : error.message\n    });\n  }\n};\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nasync function signTx(txParams, privKey, txFormatter) {\n  const finalTxParams = await txFormatter.formatTransaction(txParams);\n  const common = await txFormatter.getCommonConfiguration();\n  const unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n    common\n  });\n  const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n  return signedTx;\n}\n\nfunction getProviderHandlers(_ref) {\n  let {\n    txFormatter,\n    privKey,\n    getProviderEngineProxy\n  } = _ref;\n  return {\n    getAccounts: async _ => [\"0x\".concat(privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\"))],\n    getPrivateKey: async _ => privKey,\n    processTransaction: async (txParams, _) => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      const txHash = await providerEngineProxy.request({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))]\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      return \"0x\".concat(signedTx.toString(\"hex\"));\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({\n        privateKey: privKeyBuffer,\n        data: msgParams.data\n      });\n      return sig;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const chainId = await providerEngineProxy.request({\n        method: \"eth_chainId\"\n      });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n\n      const params = _objectSpread$2(_objectSpread$2({}, msgParams), {}, {\n        version: SignTypedDataVersion.V1\n      });\n\n      validateTypedMessageParams(params, finalChainId);\n      const data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data,\n        version: SignTypedDataVersion.V1\n      });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams, _) => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const chainId = await providerEngineProxy.request({\n        method: \"eth_chainId\"\n      });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data,\n        version: SignTypedDataVersion.V3\n      });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams, _) => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const chainId = await providerEngineProxy.request({\n        method: \"eth_chainId\"\n      });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data,\n        version: SignTypedDataVersion.V4\n      });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address, _) => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams, _) => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({\n        encryptedData: JSON.parse(buff.toString(\"utf8\")),\n        privateKey: privKey\n      });\n      return decrypted;\n    }\n  };\n}\n\nfunction bnLessThan(a, b) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n\n  return new BigNumber$1(a, 10).lt(b, 10);\n}\nfunction bnToHex(inputBn) {\n  return addHexPrefix(inputBn.toString(16));\n}\nfunction hexToBn(inputHex) {\n  if (BN.isBN(inputHex)) return inputHex;\n  return new BN(stripHexPrefix(inputHex), 16);\n}\nfunction BnMultiplyByFraction(targetBN, numerator, denominator) {\n  const numberBN = new BN(numerator);\n  const denomBN = new BN(denominator);\n  return targetBN.mul(numberBN).div(denomBN);\n}\n\nconst LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nconst EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nconst TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\"\n};\nconst TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\"\n};\nconst GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\"\n};\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass TransactionFormatter {\n  constructor(_ref) {\n    let {\n      getProviderEngineProxy\n    } = _ref;\n\n    _defineProperty(this, \"chainConfig\", null);\n\n    _defineProperty(this, \"getProviderEngineProxy\", void 0);\n\n    _defineProperty(this, \"isEIP1559Compatible\", false);\n\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n\n  get providerProxy() {\n    return this.getProviderEngineProxy();\n  }\n\n  async init() {\n    this.chainConfig = await this.providerProxy.request({\n      method: \"eth_provider_config\",\n      params: []\n    });\n    this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n  }\n\n  async getCommonConfiguration() {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const {\n      displayName: name,\n      chainId\n    } = this.chainConfig;\n    const hardfork = this.isEIP1559Compatible ? Hardfork.London : Hardfork.Berlin;\n    const customChainParams = {\n      name,\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork\n    };\n    return Common.custom(customChainParams);\n  }\n\n  async formatTransaction(txParams) {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n\n    const clonedTxParams = _objectSpread$1({}, txParams);\n\n    if (clonedTxParams.nonce === undefined) clonedTxParams.nonce = await this.providerProxy.request({\n      method: \"eth_getTransactionCount\",\n      params: [txParams.from, \"latest\"]\n    });\n\n    if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n      if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n      if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas; // if gas is not provided explicitly, estimate it.\n\n      if (!clonedTxParams.gas) {\n        const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n\n        if (defaultGasLimit) {\n          clonedTxParams.gasLimit = defaultGasLimit;\n        }\n      } else {\n        clonedTxParams.gasLimit = clonedTxParams.gas;\n      }\n\n      return clonedTxParams;\n    }\n\n    if (!clonedTxParams.gas) {\n      const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n\n      if (defaultGasLimit) {\n        clonedTxParams.gasLimit = defaultGasLimit;\n      }\n    } else {\n      clonedTxParams.gasLimit = clonedTxParams.gas;\n    }\n\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas\n    } = await this.getDefaultGasFees(clonedTxParams);\n\n    if (this.isEIP1559Compatible) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n        clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n        clonedTxParams.maxPriorityFeePerGas = bnLessThan(typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas, typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice) ? defaultMaxPriorityFeePerGas : clonedTxParams.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n\n        if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n\n        if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          clonedTxParams.maxFeePerGas = defaultGasPrice;\n        }\n\n        if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available  then we set maxPriorityFeePerGas to\n          // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n        }\n      } // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n\n      delete clonedTxParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n      delete clonedTxParams.maxPriorityFeePerGas;\n      delete clonedTxParams.maxFeePerGas;\n    } // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n\n\n    if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n      clonedTxParams.gasPrice = defaultGasPrice;\n    }\n\n    clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    clonedTxParams.chainId = this.chainConfig.chainId;\n    return clonedTxParams;\n  }\n\n  async fetchEthGasPriceEstimate() {\n    const gasPrice = await this.providerProxy.request({\n      method: \"eth_gasPrice\",\n      params: []\n    });\n    return {\n      gasPrice: hexWEIToDecGWEI(gasPrice).toString()\n    };\n  }\n\n  async getEIP1559Compatibility() {\n    const latestBlock = await this.providerProxy.request({\n      method: \"eth_getBlockByNumber\",\n      params: [\"latest\", false]\n    });\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n    return !!supportsEIP1559;\n  }\n\n  async fetchGasFeeEstimateData() {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n    const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n    let gasData;\n\n    try {\n      if (this.isEIP1559Compatible) {\n        // TODO: kovan is not working due to a bug in metamask api\n        const estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", \"\".concat(chainId)));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", \"\".concat(chainId)));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch (e) {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate();\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE\n        };\n      } catch (error) {\n        throw new Error(\"Gas fee/price estimation failed. Message: \".concat(error.message));\n      }\n    }\n\n    return gasData;\n  }\n\n  async getDefaultGasFees(txParams) {\n    if (!this.isEIP1559Compatible && txParams.gasPrice || this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas) {\n      return {};\n    }\n\n    try {\n      const {\n        gasFeeEstimates,\n        gasEstimateType\n      } = await this.fetchGasFeeEstimateData();\n\n      if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        const {\n          medium: {\n            suggestedMaxPriorityFeePerGas,\n            suggestedMaxFeePerGas\n          } = {}\n        } = gasFeeEstimates;\n\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n            maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas))\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI(gasFeeEstimates.medium))\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI(gasFeeEstimates.gasPrice))\n        };\n      }\n    } catch (error) {\n      log.error(error);\n    }\n\n    const {\n      gasPrice\n    } = await this.fetchEthGasPriceEstimate();\n    return {\n      gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice))\n    };\n  }\n\n  async estimateTxGas(txMeta) {\n    const txParams = _objectSpread$1({}, txMeta); // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n\n\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n    const gas = await this.providerProxy.request({\n      method: \"eth_estimateGas\",\n      params: [txParams]\n    });\n    return gas;\n  }\n\n  async analyzeGasUsage(txMeta) {\n    const block = await this.providerProxy.request({\n      method: \"eth_getBlockByNumber\",\n      params: [\"latest\", false]\n    }); // fallback to block gasLimit\n\n    const blockGasLimitBN = hexToBn(block.gasLimit);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error) {\n      log.warn(error);\n    }\n\n    return {\n      blockGasLimit: block.gasLimit,\n      estimatedGasHex\n    };\n  }\n\n  addGasBuffer(initialGasLimitHex, blockGasLimitHex) {\n    let multiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.5;\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n    const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier); // if initialGasLimit is above blockGasLimit, dont modify it\n\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn); // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn); // otherwise use blockGasLimit\n\n    return bnToHex(upperGasLimitBn);\n  }\n\n  async determineTransactionCategory(txParameters) {\n    const {\n      data,\n      to\n    } = txParameters;\n    let code = \"\";\n    let txCategory;\n\n    if (data && !to) {\n      txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    } else {\n      try {\n        code = await this.providerProxy.request({\n          method: \"eth_getCode\",\n          params: [to, \"latest\"]\n        });\n      } catch (error) {\n        log.warn(error);\n      }\n\n      const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n      txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    }\n\n    return {\n      transactionCategory: txCategory,\n      code\n    };\n  }\n\n  async getDefaultGasLimit(txParams) {\n    const {\n      transactionCategory\n    } = await this.determineTransactionCategory(_objectSpread$1({}, txParams));\n\n    if (txParams.gas) {\n      return txParams.gas;\n    }\n\n    if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n      }\n\n      const TWENTY_ONE_THOUSAND = 21000; // This is a standard ether simple send, gas requirement is exactly 21k\n\n      return addHexPrefix(TWENTY_ONE_THOUSAND.toString(16));\n    }\n\n    const {\n      blockGasLimit,\n      estimatedGasHex\n    } = await this.analyzeGasUsage(txParams); // add additional gas buffer to our estimation for safety\n\n    const gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit);\n    return gasLimit;\n  }\n\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass EthereumPrivateKeyProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        })\n      },\n      state\n    });\n  }\n\n  async enable() {\n    if (!this.state.privateKey) throw ethErrors.provider.custom({\n      message: \"Private key is not found in state, plz pass it in constructor state param\",\n      code: 4902\n    });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(privKey) {\n    const txFormatter = new TransactionFormatter({\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const providerHandlers = getProviderHandlers({\n      txFormatter,\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine(); // Not a partial anymore because of checks in ctor\n\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await txFormatter.init();\n    await this.lookupNetwork();\n  }\n\n  async updateAccount(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const existingKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request({\n          method: \"eth_accounts\"\n        })\n      });\n    }\n  }\n\n  async switchChain(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    this.configure({\n      chainConfig\n    });\n    const privKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n    await this.setupProvider(privKey);\n  }\n\n  async lookupNetwork() {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    if (!chainId) throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request({\n      method: \"net_version\",\n      params: []\n    });\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected(\"Invalid network, net_version is: \".concat(network));\n\n    if (this.state.chainId !== chainId) {\n      this._providerEngineProxy.emit(\"chainChanged\", chainId);\n\n      this._providerEngineProxy.emit(\"connect\", {\n        chainId\n      });\n    }\n\n    this.update({\n      chainId\n    });\n    return network;\n  }\n\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addChain: async params => {\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = params;\n        this.addChain({\n          chainNamespace: \"eip155\",\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\"\n        });\n      },\n      switchChain: async params => {\n        const {\n          chainId\n        } = params;\n        await this.switchChain({\n          chainId\n        });\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  getAccountMiddleware() {\n    const accountHandlers = {\n      updatePrivatekey: async params => {\n        const {\n          privateKey\n        } = params;\n        await this.updateAccount({\n          privateKey\n        });\n      }\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n\n}\n\n_defineProperty(EthereumPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new EthereumPrivateKeyProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nexport { EthereumPrivateKeyProvider, TransactionFormatter, WalletConnectProvider, getProviderHandlers };\n//# sourceMappingURL=ethereumProvider.esm.js.map\n",null,null,null,null,null,null,null,null,null,null,null],"sourceRoot":""}