{"version":3,"sources":["../../src/rpc/JrpcClient.ts","../../src/rpc/solanaRpcMiddlewares.ts","../../src/providers/injectedProviders/base/baseInjectedProvider.ts","../../src/providers/injectedProviders/base/providerHandlers.ts","../../src/providers/injectedProviders/injectedProviderProxy.ts","../../src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../../src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../../src/providers/injectedProviders/slope/providerHandlers.ts","../../src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../../src/providers/injectedProviders/solflare/providerHandlers.ts","../../src/providers/injectedProviders/sollet/solletInjectedProvider.ts","../../src/providers/injectedProviders/sollet/providerHandlers.ts","../../src/providers/injectedProviders/torus/providerHandlers.ts","../../src/providers/injectedProviders/torus/torusInjectedProvider.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../../src/solanaWallet.ts","../node_modules/@web3auth/openlogin-adapter/node_modules/bs58/index.js","../node_modules/@web3auth/openlogin-adapter/node_modules/base-x/src/index.js"],"names":["createChainIdMiddleware","chainId","req","res","next","end","method","result","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","getAccounts","createAsyncMiddleware","request","response","Error","accounts","undefined","requestAccounts","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","createRequestAccountsMiddleware","createGetAccountsMiddleware","createGenericJRPCMiddleware","BaseInjectedProvider","constructor","config","state","chainConfig","chainNamespace","CHAIN_NAMESPACES","SOLANA","switchChain","_","Promise","resolve","setupProvider","injectedProvider","engine","JRPCEngine","getProviderHandlers","solanaMiddleware","push","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","update","BaseProvider","getBaseProviderHandlers","publicKey","bs58","encode","toBytes","ethErrors","rpc","methodNotSupported","params","message","transaction","display","sigData","signature","length","invalidParams","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","SlopeInjectedProxyProvider","getProviderEngineProxy","connect","data","txMessage","invalidRequest","serializeMessage","PublicKey","decode","addSignature","custom","code","conn","Connection","sendRawTransaction","serialize","allTxns","unsignedTx","i","msg","signatures","getSlopeHandlers","bind","SolflareInjectedProvider","solflareProviderHandlers","getSolflareHandlers","SolletInjectedProvider","sign","getSolletHandlers","getTorusHandlers","sendTransaction","transactions","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","toString","parseInt","WalletInitializationError","rpcConnectionError","emit","on","configure","_objectSpread","privKey","keyPairGenerator","Keypair","fromSecretKey","Buffer","from","keyPair","toBase58","secretKey","partialSign","signedMsg","nacl","detached","_providerEngineProxy","sig","txns","tx","SolanaPrivateKeyProvider","enable","privateKey","getChainSwitchMiddleware","getAccountMiddleware","updateAccount","getChainConfig","health","chainSwitchHandlers","addNewChainConfig","nativeCurrency","chainName","rpcUrls","blockExplorerUrls","addChain","ticker","symbol","tickerName","name","displayName","blockExplorer","switchSolanaChain","createChainSwitchMiddleware","accountHandlers","updatePrivatekey","createAccountMiddleware","providerFactory","SolanaWallet","signedTransaction","signedTransactions","args","basex","require","module","exports","_Buffer","ALPHABET","TypeError","BASE_MAP","Uint8Array","j","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","decodeUnsafe","source","alloc","psz","zeroes","size","b256","carry","it3","it4","vch","allocUnsafe","fill","Array","isArray","isBuffer","pbegin","pend","b58","it1","it2","str","repeat","string","buffer"],"mappings":"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","file":"static/js/16.ce943bd8.chunk.js","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { createFetchMiddleware, providerFromEngine } from '@toruslabs/base-controllers';\nimport { mergeMiddleware, createAsyncMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport bs58 from 'bs58';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { PublicKey, Connection, Keypair } from '@solana/web3.js';\nimport nacl from '@toruslabs/tweetnacl-js';\n\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n\n    return next();\n  };\n}\nfunction createProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n\n    return next();\n  };\n}\nfunction createConfigMiddleware(providerConfig) {\n  const {\n    chainId\n  } = providerConfig;\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\nfunction createJsonRpcClient(providerConfig) {\n  const {\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({\n    rpcTarget\n  });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\n\nfunction createGetAccountsMiddleware(_ref) {\n  let {\n    getAccounts\n  } = _ref;\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== \"getAccounts\") return next();\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\"); // This calls from the prefs controller\n\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\nfunction createRequestAccountsMiddleware(_ref2) {\n  let {\n    requestAccounts\n  } = _ref2;\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== \"requestAccounts\") return next();\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\"); // This calls the UI login function\n\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== targetMethod) return next();\n    if (!handler) throw new Error(\"WalletMiddleware - \".concat(targetMethod, \" not provided\"));\n    const result = await handler(request);\n    response.result = result;\n    return undefined;\n  });\n}\nfunction createSolanaMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    requestAccounts,\n    signTransaction,\n    signAndSendTransaction,\n    signAllTransactions,\n    signMessage,\n    getPrivateKey,\n    getSecretKey\n  } = providerHandlers;\n  return mergeMiddleware([createRequestAccountsMiddleware({\n    requestAccounts\n  }), createGetAccountsMiddleware({\n    getAccounts\n  }), createGenericJRPCMiddleware(\"signTransaction\", signTransaction), createGenericJRPCMiddleware(\"signAndSendTransaction\", signAndSendTransaction), createGenericJRPCMiddleware(\"signAllTransactions\", signAllTransactions), createGenericJRPCMiddleware(\"signMessage\", signMessage), createGenericJRPCMiddleware(\"solanaPrivateKey\", getPrivateKey), createGenericJRPCMiddleware(\"solanaSecretKey\", getSecretKey)]);\n}\nfunction createChainSwitchMiddleware(_ref3) {\n  let {\n    addNewChainConfig,\n    switchSolanaChain\n  } = _ref3;\n  return mergeMiddleware([createGenericJRPCMiddleware(\"addSolanaChain\", addNewChainConfig), createGenericJRPCMiddleware(\"switchSolanaChain\", switchSolanaChain)]);\n}\nfunction createAccountMiddleware(_ref4) {\n  let {\n    updatePrivatekey\n  } = _ref4;\n  return mergeMiddleware([createGenericJRPCMiddleware(\"updateAccount\", updatePrivatekey)]);\n}\n\nfunction ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass BaseInjectedProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$3(_objectSpread$3({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n\n  async switchChain(_) {\n    return Promise.resolve();\n  }\n\n  async setupProvider(injectedProvider) {\n    const engine = new JRPCEngine();\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig);\n    engine.push(configMiddleware);\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  async lookupNetwork() {\n    const {\n      chainConfig\n    } = this.config;\n    this.update({\n      chainId: chainConfig.chainId\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  getInjectedProviderProxy(_) {\n    return undefined;\n  }\n\n}\n\nconst getBaseProviderHandlers = injectedProvider => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [],\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async req => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async req => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async req => {\n      var _req$params, _req$params2;\n\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) || !((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async req => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return {\n        signature: txRes.signature\n      };\n    }\n  };\n  return providerHandlers;\n};\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction createInjectedProviderProxyMiddleware(provider) {\n  return createAsyncMiddleware(async (req, res, _next) => {\n    const result = await provider.request(_objectSpread$2({}, req));\n    res.result = result;\n  });\n}\n\nclass PhantomInjectedProvider extends BaseInjectedProvider {\n  getProviderHandlers(injectedProvider) {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  getInjectedProviderProxy(injectedProvider) {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n\n}\n\nconst getSlopeHandlers = (injectedProvider, getProviderEngineProxy) => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      const {\n        data\n      } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const {\n        data\n      } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async req => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({\n        message: \"Invalid transaction message\"\n      });\n      const {\n        data\n      } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, signature);\n      return txMessage;\n    },\n    signMessage: async req => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async req => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({\n        message: \"Invalid transaction message\"\n      });\n      const {\n        data\n      } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, signature);\n      const chainConfig = await provider.request({\n        method: \"solana_provider_config\",\n        params: []\n      });\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return {\n        signature: res\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params, _req$params2, _data$signatures;\n\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) || !((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const {\n        length\n      } = allTxns;\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        unsignedTx.push(bs58.encode(req.params.message[i].serializeMessage()));\n      }\n\n      const {\n        msg,\n        data\n      } = await injectedProvider.signAllTransactions(unsignedTx);\n      if (!data.publicKey || ((_data$signatures = data.signatures) === null || _data$signatures === void 0 ? void 0 : _data$signatures.length) !== length) throw new Error(msg);\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, signature);\n      }\n\n      return allTxns;\n    }\n  };\n  return providerHandlers;\n};\n\nclass SlopeInjectedProxyProvider extends BaseInjectedProvider {\n  getProviderHandlers(injectedProvider) {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n\n}\n\nconst getSolflareHandlers = (injectedProvider, getProviderEngineProxy) => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider);\n\n  solflareProviderHandlers.signAndSendTransaction = async req => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = await provider.request({\n      method: \"solana_provider_config\",\n      params: []\n    });\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return {\n      signature: res\n    };\n  };\n\n  return solflareProviderHandlers;\n};\n\nclass SolflareInjectedProvider extends BaseInjectedProvider {\n  getProviderHandlers(injectedProvider) {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n\n}\n\nconst getSolletHandlers = (injectedProvider, getProviderEngineProxy) => {\n  const providerHandlers = getBaseProviderHandlers(injectedProvider);\n\n  providerHandlers.signMessage = async req => {\n    const {\n      signature\n    } = await injectedProvider.sign(req.params.message, \"utf8\");\n    return signature;\n  };\n\n  providerHandlers.signAndSendTransaction = async req => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = await provider.request({\n      method: \"solana_provider_config\",\n      params: []\n    });\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return {\n      signature: res\n    };\n  };\n\n  return providerHandlers;\n};\n\nclass SolletInjectedProvider extends BaseInjectedProvider {\n  getProviderHandlers(injectedProvider) {\n    return getSolletHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n\n}\n\nconst getTorusHandlers = injectedProvider => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request({\n        method: \"solana_requestAccounts\",\n        params: {}\n      });\n      return accounts;\n    },\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request({\n        method: \"solana_requestAccounts\",\n        params: {}\n      });\n      return accounts;\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async req => {\n      var _req$params;\n\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n    signTransaction: async req => {\n      var _req$params2;\n\n      if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n    signAndSendTransaction: async req => {\n      var _req$params3;\n\n      if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return {\n        signature: response\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params4, _req$params5;\n\n      if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    }\n  };\n  return providerHandlers;\n};\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass TorusInjectedProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$1(_objectSpread$1({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n\n  async switchChain(_) {\n    return Promise.resolve();\n  }\n\n  async setupProvider(injectedProvider) {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  async lookupNetwork() {\n    if (!this.provider) throw ethErrors.provider.custom({\n      message: \"Torus solana provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const connectedChainId = await this.provider.request({\n      method: \"solana_chainId\"\n    });\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : \"0x\".concat(parseInt(connectedChainId, 10).toString(16));\n    if (chainId !== connectedHexChainId) throw WalletInitializationError.rpcConnectionError(\"Invalid network, net_version is: \".concat(connectedHexChainId, \", expected: \").concat(chainId));\n    this.update({\n      chainId: connectedHexChainId\n    });\n    this.provider.emit(\"connect\", {\n      chainId: this.state.chainId\n    });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  async setupEngine(injectedProvider) {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  async handleInjectedProviderUpdate(injectedProvider) {\n    injectedProvider.on(\"accountsChanged\", async accounts => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async chainId => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : \"0x\".concat(parseInt(chainId, 10).toString(16)); // Check if chainId changed and trigger event\n\n      this.configure({\n        chainConfig: _objectSpread$1(_objectSpread$1({}, this.config.chainConfig), {}, {\n          chainId: connectedHexChainId\n        })\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n\n}\n\nasync function getProviderHandlers(_ref) {\n  let {\n    privKey,\n    getProviderEngineProxy\n  } = _ref;\n\n  const keyPairGenerator = () => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n    signTransaction: async req => {\n      var _req$params;\n\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const transaction = req.params.message;\n      transaction.partialSign(keyPair);\n      return transaction;\n    },\n    signMessage: async req => {\n      var _req$params2;\n\n      if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n    signAndSendTransaction: async req => {\n      var _req$params3;\n\n      if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const _providerEngineProxy = getProviderEngineProxy();\n\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const transaction = req.params.message;\n      transaction.sign(keyPair);\n      const sig = await _providerEngineProxy.request({\n        method: \"sendTransaction\",\n        params: [bs58.encode(transaction.serialize())]\n      });\n      return {\n        signature: sig\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params4, _req$params5, _req$params6;\n\n      if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = (_req$params6 = req.params) === null || _req$params6 === void 0 ? void 0 : _req$params6.message;\n\n      for (const tx of txns || []) {\n        const transaction = tx;\n        transaction.partialSign(keyPair);\n      }\n\n      return txns;\n    }\n  };\n  return providerHandlers;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass SolanaPrivateKeyProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n\n  async enable() {\n    if (!this.state.privateKey) throw ethErrors.provider.custom({\n      message: \"Private key is not found in state, plz pass it in constructor state param\",\n      code: 4902\n    });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(privKey) {\n    const providerHandlers = await getProviderHandlers({\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  async updateAccount(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const existingKey = await this._providerEngineProxy.request({\n      method: \"solanaPrivateKey\"\n    });\n\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request({\n          method: \"requestAccounts\"\n        })\n      });\n    }\n  }\n\n  async switchChain(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    this.configure({\n      chainConfig\n    });\n    const privKey = await this._providerEngineProxy.request({\n      method: \"solanaPrivateKey\"\n    });\n    await this.setupProvider(privKey);\n  }\n\n  async lookupNetwork() {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const health = await this._providerEngineProxy.request({\n      method: \"getHealth\",\n      params: []\n    });\n    const {\n      chainConfig\n    } = this.config;\n    if (health !== \"ok\") throw WalletInitializationError.rpcConnectionError(\"Failed to lookup network for following rpc target: \".concat(chainConfig.rpcTarget));\n    this.update({\n      chainId: chainConfig.chainId\n    });\n\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", {\n        chainId: this.state.chainId\n      });\n    }\n\n    return this.state.chainId;\n  }\n\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addNewChainConfig: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = req.params;\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"SOL\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\"\n        });\n      },\n      switchSolanaChain: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  getAccountMiddleware() {\n    const accountHandlers = {\n      updatePrivatekey: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const {\n          privateKey\n        } = req.params;\n        await this.updateAccount({\n          privateKey\n        });\n      }\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n\n}\n\n_defineProperty(SolanaPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new SolanaPrivateKeyProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nclass SolanaWallet {\n  constructor(provider) {\n    _defineProperty(this, \"provider\", void 0);\n\n    this.provider = provider;\n  }\n\n  async requestAccounts() {\n    const accounts = await this.provider.request({\n      method: \"requestAccounts\",\n      params: {}\n    });\n    return accounts;\n  }\n\n  async signAndSendTransaction(transaction) {\n    const {\n      signature\n    } = await this.provider.request({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction\n      }\n    });\n    return {\n      signature\n    };\n  }\n\n  async signTransaction(transaction) {\n    const signedTransaction = await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction\n      }\n    });\n    return signedTransaction;\n  }\n\n  async signAllTransactions(transactions) {\n    const signedTransactions = await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions\n      }\n    });\n    return signedTransactions;\n  }\n\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"signMessage\",\n      params: {\n        message: data\n      }\n    });\n    return response;\n  }\n\n  async request(args) {\n    const result = await this.provider.request(args);\n    return result;\n  }\n\n}\n\nexport { PhantomInjectedProvider, SlopeInjectedProxyProvider, SolanaPrivateKeyProvider, SolanaWallet, SolflareInjectedProvider, SolletInjectedProvider, TorusInjectedProvider };\n//# sourceMappingURL=solanaProvider.esm.js.map\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n"],"sourceRoot":""}